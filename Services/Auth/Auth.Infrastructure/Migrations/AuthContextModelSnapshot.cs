// <auto-generated />
using System;
using Auth.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Auth.Infrastructure.Migrations
{
    [DbContext(typeof(AuthContext))]
    partial class AuthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Auth.Domain.Aggregates.UserAggregate.Credential", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_credentials");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_credentials_role_id");

                    b.ToTable("credentials", (string)null);
                });

            modelBuilder.Entity("Auth.Domain.Aggregates.UserAggregate.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("caption");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Auth.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Auth.Domain.Aggregates.UserAggregate.Credential", b =>
                {
                    b.HasOne("Auth.Domain.Aggregates.UserAggregate.Role", "Role")
                        .WithMany("Credentials")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_credentials_roles_role_id");

                    b.HasOne("Auth.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany("Credentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_credentials_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Auth.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.OwnsOne("Auth.Domain.Aggregates.UserAggregate.Personal", "Personal", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("BirthDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("personal_birth_date");

                            b1.Property<string>("Firstname")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("personal_firstname");

                            b1.Property<string>("Patronymic")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("personal_patronymic");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("personal_surname");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.Navigation("Personal")
                        .IsRequired();
                });

            modelBuilder.Entity("Auth.Domain.Aggregates.UserAggregate.Role", b =>
                {
                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("Auth.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Navigation("Credentials");
                });
#pragma warning restore 612, 618
        }
    }
}
